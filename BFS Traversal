#BFS in Graph

INPUT:
4 4
0 1
0 3
1 2
2 3

OUTPUT:
0 1 3 2

#include <bits/stdc++.h> 

void bfs(unordered_map <int,set<int>> &adj,vector<int> &ans, unordered_map <int,bool> &visited, int node)
{
    queue <int> q;
    q.push(node);
    visited[node]=1;

    while(!q.empty()){
        int front = q.front();
        q.pop();
        
        ans.push_back(front);
        for(auto it:adj[front]){
            if(!visited[it])
            {
                q.push(it);
                visited[it]=1;
            }
        }
        
    }
    
}
vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
    unordered_map <int , set<int>> adj;
    vector<int> ans;
    unordered_map <int,bool> visited;
    // Write your code here
    for(int i=0;i<edges.size();i++){
        int u = edges[i].first;
        int v = edges[i].second;

        adj[u].insert(v);
        adj[v].insert(u);
    }

    for(int i=0;i<vertex;i++){
        if(!visited[i])
        bfs(adj,ans,visited,i);
    }
    return ans;
    
}
