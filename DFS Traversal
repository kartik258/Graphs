INPUT:
5 4
0 2
0 1
1 2
3 4

OUTPUT:
2
0 1 2
3 4

If we do a DFS traversal from vertex 0 we will get a component with vertices [0, 2, 1]. If we do a DFS traversal from 3 we will get another component with vertices
[3, 4]Hence,  we have two disconnected components so on the first line, print 2. Now, print each component in increasing order. On the first line print 0 1 2 and
on the second line, print 3 4. [0 1 2] comes before [3 4] as the first vertex 0 from the first component is smaller than the first vertex 3 from the second component. 

void dfs(unordered_map <int,list<int>> &adj,unordered_map<int,bool> &visited,
                 vector<int> &component , int node){
        
        component.push_back(node);
        visited[node]=1;

        for(auto it: adj[node]){
            if(!visited[it])
            dfs(adj,visited,component,it);
        }
}


vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    unordered_map <int,list<int>> adj;
    // Write your code here
    for(int i=0;i<edges.size();i++){
        int u = edges[i][0];
        int v = edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    vector<vector<int>> ans;
    unordered_map<int,bool> visited;

    for(int i=0;i<V;i++){
        if(!visited[i]){
            vector<int> component;
            dfs(adj,visited,component,i);
            ans.push_back(component);
        }
    }
        return ans;

}
