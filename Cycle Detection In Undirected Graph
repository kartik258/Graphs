Cycle Detection In Undirected Graph

INPUT:
1
3 2  //vertices,edges
1 2 //reln
2 3

OUTPUT:
NO

#include <bits/stdc++.h> 
using namespace std;
bool isCyclicBFS(int node, unordered_map <int,bool> &visited,unordered_map <int , list<int>> &adjlist){
    unordered_map<int,int> parent;

    parent[node]=-1;
    visited[node]=1;
    queue<int> q;
    q.push(node);

    while(!q.empty()){
        int front=q.front();
        q.pop();

        for(auto neighbour:adjlist[front]){
            if(visited[neighbour]==true && neighbour!=parent[front])
            return true;
            else if(!visited[neighbour]){
                q.push(neighbour);
                visited[neighbour]=1;
                parent[neighbour]=front;
            }
        }
    }
    return false;
}

string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    unordered_map <int , list<int>> adjlist;
    // vector<int> ans;
    bool ans;
    unordered_map <int,bool> visited;
    
    for(int i=0;i<edges.size();i++){
        int u = edges[i][0];
        int v = edges[i][1];

        adjlist[u].push_back(v);
        adjlist[v].push_back(u);
    }

    for(int i=0;i<n;i++){
        if(!visited[i])
            {
                ans=isCyclicBFS(i,visited,adjlist);
                if(ans==1)
                    return "Yes";
            }
    }
    return "No";
}
